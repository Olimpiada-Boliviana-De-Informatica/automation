- hosts: cms_db
  gather_facts: no
  roles:
    - role: postgresql
      vars:
        dbs:
          - name: "{{ cms_db }}"
            public_schema_owner: "{{ cms_db_user }}" # Required for cmsDropDB
        db_users:
          - name: "{{ cms_db_user }}"
            password: "{{ cms_db_pass }}"
            allowed_databases:
              - "{{ cms_db }}"
            allowed_host_addresses: "{{ (groups['cms_scoring'] + groups['cms_checker'] + groups['cms_evaluation'] + groups['cms_contest_web'] + groups['cms_admin_web'] + groups['cms_proxy'] + (groups['cms_worker'] | default([]))) | unique | ansible.utils.ipaddr('network/prefix') }}"
            enable_large_object: yes
        db_privileges:
          - database: "{{ cms_db }}"
            roles: "{{ cms_db_user }}"
            privs: ALL

- hosts: nginx_contest
  gather_facts: no
  roles:
    - name: Setup Nginx for CMS contest
      role: nginx
      vars:
        domains:
          - name: cms-contest
            fqdn: "{{ cms_contest_web_fqdn }}"
            config_template: "{{ playbook_dir }}/../templates/cms-contest.j2"
            upstream_addresses: "{{ groups['cms_contest_web'] | product(range(8001, 8001 + cms_contest_web_services_per_host)) | map('join', ':') | list }}"
            auth_basic_user: "{{ cms_contest_web_auth_basic_user | default('') }}"
            auth_basic_pass: "{{ cms_contest_web_auth_basic_pass | default('') }}"
          - name: cms-admin
            fqdn: "{{ cms_admin_web_fqdn }}"
            config_template: "{{ playbook_dir }}/../templates/cms-admin.j2"
            upstream_addresses:
              - "{{ groups['cms_admin_web'][0] }}:8000"
            auth_basic_user: "{{ cms_admin_web_auth_basic_user | default('') }}"
            auth_basic_pass: "{{ cms_admin_web_auth_basic_pass | default('') }}"
  tasks:
    - name: Install STL docs to serve directly from Nginx
      become: yes
      package:
        name: cppreference-doc-en-html
      tags: packages

- hosts: nginx_public
  gather_facts: no
  roles:
    - name: Setup Nginx for CMS ranking
      role: nginx
      vars:
        domains:
          - name: cms-ranking
            fqdn: "{{ cms_ranking_fqdn }}"
            config_template: "{{ playbook_dir }}/../templates/cms-ranking.j2"
            upstream_addresses: "{{ groups['cms_ranking'] | product(['8890']) | map('join', ':') | list }}"
            auth_basic_user: "{{ cms_ranking_auth_basic_user | default('') }}"
            auth_basic_pass: "{{ cms_ranking_auth_basic_pass | default('') }}"

- hosts: cms
  gather_facts: no
  roles:
    - role: cms
      vars:
        services: "{{ group_names }}"
        run_db_migration: "{{ inventory_hostname in groups['cms_admin_web'] and groups['cms_admin_web'].index(inventory_hostname) == 0 }}" # Only run DB migration when executing in the first cms_admin_web instance.
        additional_cms_users: "{{ [ansible_user] }}"

- hosts: cms_worker
  gather_facts: no
  tasks:
    - name: Generate isolate_cpusets config
      set_fact:
        isolate_cpusets: "{{ (isolate_cpusets | default([])) + [ worker[1] | combine({'box_ids': range(10 + i*10, 20 + i*10) | list}) ] }}"
      loop: "{{ range((cms_worker_host_slots | default([])) | length) | product(cms_worker_services_per_host_options) | list }}"
      loop_control:
        index_var: i
        loop_var: worker # First element is the worker host index, second element is a list of cpuset config entries for the worker host.

    - name: Set up Isolate
      include_role:
        name: isolate
      vars:
        isolate_group: cmsuser
      tags: always
